#!/usr/bin/env python3
#
# (c) 2019 Copyright, Real-Time Innovations, Inc.  All rights reserved. RTI
# grants Licensee a license to use, modify, compile, and create derivative
# works of the Software.  Licensee has the right to distribute object form only
# for use with RTI products.  The Software is provided "as is", with no
# warranty of any type, including any warranty for fitness for any purpose. RTI
# is under no obligation to maintain or support the Software.  RTI shall not be
# liable for any incidental or consequential damages arising out of the use or
# inability to use the software.
"""Ensure correct format of commited files.

This module performs linting for staged files and exit on error if any linter
fail. Currently supporting ``clang-format`` and ``markdownlint``.
"""
import sys
import time

from pathlib import Path
from sultan.api import Sultan
from subprocess import CalledProcessError

SCRIPT_PATH = Path(__file__)


class FormatError(Exception):
    pass


def stream_sultan_output(result):
    """Stream command output.

    Args:
        result (sultan.result.Result): Command result object.

    """
    while True:
        complete = result.is_complete

        for line in result.stdout:
            print(line)

        for line in result.stderr:
            print(line)

        if complete:
            break

        time.sleep(1)


def get_staged_files(repo_root):
    """Obtains staged files.

    Args:
        repo_root (Path): Repository top folder.

    Returns:
        List[str]: List of staged files.

    """
    with Sultan.load(cwd=repo_root) as s:
        result = s.git("diff-index", "--name-only", "--cached", "HEAD").run(
            halt_on_nonzero=False, q=True
        )

    return result.stdout


def filter_files(file_list, extensions):
    """Filter files with selected extensions.

    Args:
        file_list (List[str]): List of files.
        extensions (Set[str], Optional): Set of extensions. Defaults to set().

    Returns:
        List[str]: Filtered list of files.

    """
    return list(filter(lambda x: Path(x).suffix in extensions, file_list))


def perform_linting(repo_root, command, file_list):
    """Performs ``command`` linter to ``files``.

    Args:
        repo_root (Path): Repository top folder.
        command (List[str]): List of commands to run the linter.
        file_list (List[str]): List of files that will be lintered.

    Raises:
        FormatError: When the linter outputs format errors.

    """
    cmd = command + file_list
    with Sultan.load(cwd=repo_root) as s:
        lint_result = getattr(s, cmd[0])(*cmd[1:]).run(
            halt_on_nonzero=False, streaming=True
        )
        stream_sultan_output(lint_result)

    if lint_result.rc != 0 or len(lint_result.stdout) > 1:
        error_output = lint_result.stdout
        raise FormatError("Format error:\n{}".format(error_output))


if __name__ == "__main__":
    with Sultan.load(cwd=SCRIPT_PATH.parent) as s:
        try:
            result = s.git("rev-parse", "--show-toplevel").run(q=True)
        except CalledProcessError:
            sys.exit("Error: Script not in a git repository.")

        try:
            repo_root = Path(result.stdout[0]).resolve()
        except FileNotFoundError:
            sys.exit("Error: Root file path not found.")

    exit_error = False
    file_list = get_staged_files(repo_root)

    if not file_list:
        sys.exit()

    # Markdownlint
    markdownlint_suffix = {".md"}
    markdownlint_cmd = ["markdownlint"]
    filtered_file_list = filter_files(file_list, markdownlint_suffix)

    if filtered_file_list:
        try:
            perform_linting(repo_root, markdownlint_cmd, filtered_file_list)
        except FormatError:
            exit_error = True

    # Clang-format
    clang_format_suffix = {".c", ".cxx"}
    clang_format_cmd = ["git", "clang-format", "--diff"]
    filtered_file_list = filter_files(file_list, clang_format_suffix)

    if filtered_file_list:
        try:
            perform_linting(repo_root, clang_format_cmd, filtered_file_list)
        except FormatError:
            exit_error = True

    sys.exit(exit_error)
